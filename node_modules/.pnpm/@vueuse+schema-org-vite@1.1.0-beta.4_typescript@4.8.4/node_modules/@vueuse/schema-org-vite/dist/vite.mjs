import { resolveUserConfig, createSchemaOrg } from '@vueuse/schema-org';
import { createHead } from '@vueuse/head';

function installSchemaOrg(ctx, config) {
  const resolvedConfig = resolveUserConfig(config);
  let head = ctx.app._context.provides.usehead;
  if (!head) {
    head = createHead();
    ctx.app.use(head);
  }
  const client = createSchemaOrg({
    updateHead(fn) {
      head.addHeadObjs(fn);
      if (typeof document !== "undefined")
        head.updateDOM();
    },
    meta() {
      const inferredMeta = {};
      const tags = head.headTags?.reverse();
      if (tags) {
        const headTag = tags.filter((t) => t.tag === "title" && !!t.props.children);
        if (headTag.length)
          inferredMeta.title = headTag[0].props.children;
        const descTag = tags.filter((t) => t.tag === "meta" && t.props.name === "description" && !!t.props.content);
        if (descTag.length)
          inferredMeta.description = descTag[0].props.content;
        const imageTag = tags.filter((t) => t.tag === "meta" && t.props.property === "og:image" && !!t.props.content);
        if (imageTag.length)
          inferredMeta.image = imageTag[0].props.content;
      }
      return {
        path: ctx.router?.currentRoute.value.path || "/",
        ...inferredMeta,
        ...resolvedConfig.meta,
        ...ctx.router?.currentRoute.value.meta || {}
      };
    }
  });
  ctx.app.use(client);
  if (typeof document === "undefined") {
    client.generateSchema();
    client.setupDOM();
    return;
  }
  if (ctx.router) {
    ctx.router.afterEach(() => {
      client.generateSchema();
      client.setupDOM();
    });
  }
  return client;
}

export { installSchemaOrg };
