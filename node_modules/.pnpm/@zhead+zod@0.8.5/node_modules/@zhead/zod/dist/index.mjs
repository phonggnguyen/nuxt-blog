import { z } from 'zod';

const baseSchema = z.object({
  href: z.string().optional(),
  target: z.string().optional()
});

const styleSchema = z.object({
  media: z.string(),
  nonce: z.string(),
  title: z.string(),
  key: z.string(),
  children: z.string()
});
const styleEntriesSchema = z.array(styleSchema.partial());

const scriptSchema = z.object({
  async: z.boolean(),
  crossorigin: z.union([z.literal(""), z.literal("anonymous"), z.literal("use-credentials")]),
  defer: z.boolean(),
  fetchpriority: z.union([z.literal("high"), z.literal("low"), z.literal("auto")]),
  integrity: z.string(),
  nomodule: z.boolean(),
  nonce: z.string(),
  referrerpolicy: z.union([z.literal(""), z.literal("no-referrer"), z.literal("no-referrer-when-downgrade"), z.literal("origin"), z.literal("origin-when-cross-origin"), z.literal("same-origin"), z.literal("strict-origin"), z.literal("strict-origin-when-cross-origin"), z.literal("unsafe-url")]),
  src: z.string(),
  type: z.union([z.literal(""), z.literal("text/javascript"), z.literal("module")]),
  key: z.string(),
  children: z.string()
});
const scriptEntriesSchema = z.array(scriptSchema.partial());

const linkSchema = z.object({
  as: z.union([z.literal("audio"), z.literal("document"), z.literal("embed"), z.literal("fetch"), z.literal("font"), z.literal("image"), z.literal("object"), z.literal("script"), z.literal("style"), z.literal("track"), z.literal("video"), z.literal("worker")]),
  crossorigin: z.union([z.literal(""), z.literal("anonymous"), z.literal("use-credentials")]),
  fetchpriority: z.union([z.literal("high"), z.literal("low"), z.literal("auto")]),
  href: z.string(),
  hreflang: z.string(),
  imagesizes: z.string(),
  imagesrcset: z.string(),
  integrity: z.string(),
  media: z.string(),
  prefetch: z.string(),
  referrerpolicy: z.union([z.literal(""), z.literal("no-referrer"), z.literal("no-referrer-when-downgrade"), z.literal("origin"), z.literal("origin-when-cross-origin"), z.literal("same-origin"), z.literal("strict-origin"), z.literal("strict-origin-when-cross-origin"), z.literal("unsafe-url")]),
  rel: z.union([z.literal("alternate"), z.literal("author"), z.literal("shortcut icon"), z.literal("bookmark"), z.literal("canonical"), z.literal("dns-prefetch"), z.literal("external"), z.literal("help"), z.literal("icon"), z.literal("license"), z.literal("manifest"), z.literal("me"), z.literal("modulepreload"), z.literal("next"), z.literal("nofollow"), z.literal("noopener"), z.literal("noreferrer"), z.literal("opener"), z.literal("pingback"), z.literal("preconnect"), z.literal("prefetch"), z.literal("preload"), z.literal("prerender"), z.literal("prev"), z.literal("search"), z.literal("shortlink"), z.literal("stylesheet"), z.literal("tag"), z.literal("apple-touch-icon"), z.literal("apple-touch-startup-image")]),
  sizes: z.string(),
  title: z.string(),
  type: z.string(),
  key: z.string()
});
const linkEntriesSchema = z.array(linkSchema.partial());

const metaSchema = z.object({
  charset: z.string(),
  content: z.string(),
  httpEquiv: z.union([z.literal("content-security-policy"), z.literal("content-type"), z.literal("default-style"), z.literal("x-ua-compatible"), z.literal("refresh")]),
  name: z.union([z.any(), z.string()]),
  key: z.string()
});
const metaEntriesSchema = z.array(metaSchema.partial());

const headSchema = z.object({
  title: z.string(),
  base: baseSchema,
  link: z.array(linkSchema.partial().passthrough()),
  meta: z.array(
    metaSchema.partial().passthrough().refine((data) => {
      return !(!data.content && !data.charset);
    }, {
      message: "The attribute `content` must be included."
    })
  ),
  style: z.array(styleSchema.partial().passthrough()),
  script: z.array(
    scriptSchema.partial().passthrough().refine((data) => !(data.defer && !data.src), {
      message: "The attribute `defer` must not be used if the `src` attribute is absent."
    }).refine((data) => !(data.type === "module" && data.defer), {
      message: "The attribute `defer` must not be used with the `type` attribute set to `module`."
    })
  )
}).deepPartial();

const metaFlatSchema = z.object({
  charset: z.string(),
  description: z.string(),
  colorScheme: z.string(),
  applicationName: z.string(),
  author: z.string(),
  creator: z.string(),
  publisher: z.string(),
  generator: z.string(),
  referrer: z.union([z.literal(""), z.literal("no-referrer"), z.literal("no-referrer-when-downgrade"), z.literal("origin"), z.literal("origin-when-cross-origin"), z.literal("same-origin"), z.literal("strict-origin"), z.literal("strict-origin-when-cross-origin"), z.literal("unsafe-url")]),
  viewport: z.union([z.string(), z.object({
    width: z.union([z.number(), z.literal("device-width")]),
    height: z.union([z.number(), z.literal("device-height")]),
    initialScale: z.number().min(0).max(10),
    maximumScale: z.number().min(0).max(10),
    minimumScale: z.number().min(0).max(10),
    userScalable: z.union([z.literal("yes"), z.literal("no")]),
    viewportFit: z.union([z.literal("auto"), z.literal("contain"), z.literal("cover")])
  }).partial()]),
  robots: z.union([z.string(), z.object({
    all: z.boolean(),
    noindex: z.boolean(),
    nofollow: z.boolean(),
    none: z.boolean(),
    noarchive: z.boolean(),
    nositelinkssearchbox: z.boolean(),
    nosnippet: z.boolean(),
    indexifembedded: z.boolean(),
    maxSnippet: z.number(),
    maxImagePreview: z.union([z.literal("none"), z.literal("standard"), z.literal("large")]),
    maxVideoPreview: z.number(),
    notranslate: z.boolean(),
    unavailable_after: z.string(),
    noimageindex: z.boolean()
  }).partial()]),
  google: z.union([z.literal("nositelinkssearchbox"), z.literal("nopagereadaloud")]),
  googlebot: z.literal("notranslate"),
  googleSiteVerification: z.string(),
  rating: z.literal("adult"),
  ogUrl: z.string(),
  ogTitle: z.string(),
  ogDescription: z.string(),
  ogType: z.union([z.literal("website"), z.literal("article"), z.literal("book"), z.literal("profile"), z.literal("music.song"), z.literal("music.album"), z.literal("music.playlist"), z.literal("music.radio_status"), z.literal("video.movie"), z.literal("video.episode"), z.literal("video.tv_show"), z.literal("video.other")]),
  ogLocale: z.string(),
  ogLocaleAlternate: z.union([z.string(), z.array(z.string())]),
  ogDeterminer: z.union([z.literal("a"), z.literal("an"), z.literal("the"), z.literal(""), z.literal("auto")]),
  ogSiteName: z.string(),
  ogVideo: z.string(),
  ogVideoUrl: z.string(),
  ogVideoSecureUrl: z.string(),
  ogVideoType: z.union([z.literal("application/x-shockwave-flash"), z.literal("video/mp4")]),
  ogVideoWidth: z.union([z.string(), z.number()]),
  ogVideoHeight: z.union([z.string(), z.number()]),
  ogImage: z.string(),
  ogImageUrl: z.string(),
  ogImageSecureUrl: z.string(),
  ogImageType: z.union([z.literal("image/jpeg"), z.literal("image/gif"), z.literal("image/png")]),
  ogImageWidth: z.union([z.string(), z.number()]),
  ogImageHeight: z.union([z.string(), z.number()]),
  fbAppId: z.union([z.string(), z.number()]),
  twitterCard: z.union([z.literal("summary"), z.literal("summary_large_image"), z.literal("app"), z.literal("player")]),
  twitterTitle: z.string().max(70),
  twitterDescription: z.string().max(200),
  twitterImage: z.string(),
  twitterImageAlt: z.string().max(420),
  twitterSite: z.string(),
  twitterSiteId: z.union([z.string(), z.number()]),
  twitterCreator: z.string(),
  twitterCreatorId: z.union([z.string(), z.number()]),
  twitterPlayer: z.string(),
  twitterPlayerWidth: z.union([z.string(), z.number()]),
  twitterPlayerHeight: z.union([z.string(), z.number()]),
  twitterPlayerStream: z.string(),
  twitterAppNameIphone: z.string(),
  twitterAppIdIphone: z.string(),
  twitterAppUrlIphone: z.string(),
  twitterAppNameIpad: z.string(),
  twitterAppIdIpad: z.string(),
  twitterAppUrlIpad: z.string(),
  twitterAppNameGoogleplay: z.string(),
  twitterAppIdGoogleplay: z.string(),
  twitterAppUrlGoogleplay: z.string(),
  twitterData1: z.string(),
  twitterLabel1: z.string(),
  twitterData2: z.string(),
  twitterLabel2: z.string(),
  themeColor: z.string(),
  mobileWebAppCapable: z.literal("yes"),
  appleMobileWebAppCapable: z.literal("yes"),
  appleMobileWebAppStatusBarStyle: z.union([z.literal("default"), z.literal("black"), z.literal("black-translucent")]),
  appleMobileWebAppTitle: z.string(),
  formatDetection: z.literal("telephone=no"),
  msapplicationTileImage: z.string(),
  msapplicationTileColor: z.string(),
  msapplicationConfig: z.string(),
  contentSecurityPolicy: z.union([z.string(), z.object({
    childSrc: z.string(),
    connectSrc: z.string(),
    defaultSrc: z.string(),
    fontSrc: z.string(),
    imgSrc: z.string(),
    manifestSrc: z.string(),
    mediaSrc: z.string(),
    objectSrc: z.string(),
    prefetchSrc: z.string(),
    scriptSrc: z.string(),
    scriptSrcElem: z.string(),
    scriptSrcAttr: z.string(),
    styleSrc: z.string(),
    styleSrcElem: z.string(),
    styleSrcAttr: z.string(),
    workerSrc: z.string(),
    baseUri: z.string(),
    sandbox: z.string(),
    formAction: z.string(),
    frameAncestors: z.string(),
    navigateTo: z.string(),
    reportUri: z.string(),
    reportTo: z.string(),
    requireSriFor: z.string(),
    requireTrustedTypesFor: z.string(),
    trustedTypes: z.string(),
    upgradeInsecureRequests: z.string()
  }).partial()]),
  contentType: z.literal("text/html; charset=utf-8"),
  defaultStyle: z.string(),
  xUaCompatible: z.literal("IE=edge"),
  refresh: z.union([z.string(), z.object({
    seconds: z.number(),
    url: z.string()
  })])
});
const metaFlatInputSchema = metaFlatSchema.partial();

export { baseSchema, headSchema, linkEntriesSchema, linkSchema, metaEntriesSchema, metaFlatInputSchema, metaFlatSchema, metaSchema, scriptEntriesSchema, scriptSchema, styleEntriesSchema, styleSchema };
