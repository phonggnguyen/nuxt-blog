'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const zod = require('zod');

const baseSchema = zod.z.object({
  href: zod.z.string().optional(),
  target: zod.z.string().optional()
});

const styleSchema = zod.z.object({
  media: zod.z.string(),
  nonce: zod.z.string(),
  title: zod.z.string(),
  key: zod.z.string(),
  children: zod.z.string()
});
const styleEntriesSchema = zod.z.array(styleSchema.partial());

const scriptSchema = zod.z.object({
  async: zod.z.boolean(),
  crossorigin: zod.z.union([zod.z.literal(""), zod.z.literal("anonymous"), zod.z.literal("use-credentials")]),
  defer: zod.z.boolean(),
  fetchpriority: zod.z.union([zod.z.literal("high"), zod.z.literal("low"), zod.z.literal("auto")]),
  integrity: zod.z.string(),
  nomodule: zod.z.boolean(),
  nonce: zod.z.string(),
  referrerpolicy: zod.z.union([zod.z.literal(""), zod.z.literal("no-referrer"), zod.z.literal("no-referrer-when-downgrade"), zod.z.literal("origin"), zod.z.literal("origin-when-cross-origin"), zod.z.literal("same-origin"), zod.z.literal("strict-origin"), zod.z.literal("strict-origin-when-cross-origin"), zod.z.literal("unsafe-url")]),
  src: zod.z.string(),
  type: zod.z.union([zod.z.literal(""), zod.z.literal("text/javascript"), zod.z.literal("module")]),
  key: zod.z.string(),
  children: zod.z.string()
});
const scriptEntriesSchema = zod.z.array(scriptSchema.partial());

const linkSchema = zod.z.object({
  as: zod.z.union([zod.z.literal("audio"), zod.z.literal("document"), zod.z.literal("embed"), zod.z.literal("fetch"), zod.z.literal("font"), zod.z.literal("image"), zod.z.literal("object"), zod.z.literal("script"), zod.z.literal("style"), zod.z.literal("track"), zod.z.literal("video"), zod.z.literal("worker")]),
  crossorigin: zod.z.union([zod.z.literal(""), zod.z.literal("anonymous"), zod.z.literal("use-credentials")]),
  fetchpriority: zod.z.union([zod.z.literal("high"), zod.z.literal("low"), zod.z.literal("auto")]),
  href: zod.z.string(),
  hreflang: zod.z.string(),
  imagesizes: zod.z.string(),
  imagesrcset: zod.z.string(),
  integrity: zod.z.string(),
  media: zod.z.string(),
  prefetch: zod.z.string(),
  referrerpolicy: zod.z.union([zod.z.literal(""), zod.z.literal("no-referrer"), zod.z.literal("no-referrer-when-downgrade"), zod.z.literal("origin"), zod.z.literal("origin-when-cross-origin"), zod.z.literal("same-origin"), zod.z.literal("strict-origin"), zod.z.literal("strict-origin-when-cross-origin"), zod.z.literal("unsafe-url")]),
  rel: zod.z.union([zod.z.literal("alternate"), zod.z.literal("author"), zod.z.literal("shortcut icon"), zod.z.literal("bookmark"), zod.z.literal("canonical"), zod.z.literal("dns-prefetch"), zod.z.literal("external"), zod.z.literal("help"), zod.z.literal("icon"), zod.z.literal("license"), zod.z.literal("manifest"), zod.z.literal("me"), zod.z.literal("modulepreload"), zod.z.literal("next"), zod.z.literal("nofollow"), zod.z.literal("noopener"), zod.z.literal("noreferrer"), zod.z.literal("opener"), zod.z.literal("pingback"), zod.z.literal("preconnect"), zod.z.literal("prefetch"), zod.z.literal("preload"), zod.z.literal("prerender"), zod.z.literal("prev"), zod.z.literal("search"), zod.z.literal("shortlink"), zod.z.literal("stylesheet"), zod.z.literal("tag"), zod.z.literal("apple-touch-icon"), zod.z.literal("apple-touch-startup-image")]),
  sizes: zod.z.string(),
  title: zod.z.string(),
  type: zod.z.string(),
  key: zod.z.string()
});
const linkEntriesSchema = zod.z.array(linkSchema.partial());

const metaSchema = zod.z.object({
  charset: zod.z.string(),
  content: zod.z.string(),
  httpEquiv: zod.z.union([zod.z.literal("content-security-policy"), zod.z.literal("content-type"), zod.z.literal("default-style"), zod.z.literal("x-ua-compatible"), zod.z.literal("refresh")]),
  name: zod.z.union([zod.z.any(), zod.z.string()]),
  key: zod.z.string()
});
const metaEntriesSchema = zod.z.array(metaSchema.partial());

const headSchema = zod.z.object({
  title: zod.z.string(),
  base: baseSchema,
  link: zod.z.array(linkSchema.partial().passthrough()),
  meta: zod.z.array(
    metaSchema.partial().passthrough().refine((data) => {
      return !(!data.content && !data.charset);
    }, {
      message: "The attribute `content` must be included."
    })
  ),
  style: zod.z.array(styleSchema.partial().passthrough()),
  script: zod.z.array(
    scriptSchema.partial().passthrough().refine((data) => !(data.defer && !data.src), {
      message: "The attribute `defer` must not be used if the `src` attribute is absent."
    }).refine((data) => !(data.type === "module" && data.defer), {
      message: "The attribute `defer` must not be used with the `type` attribute set to `module`."
    })
  )
}).deepPartial();

const metaFlatSchema = zod.z.object({
  charset: zod.z.string(),
  description: zod.z.string(),
  colorScheme: zod.z.string(),
  applicationName: zod.z.string(),
  author: zod.z.string(),
  creator: zod.z.string(),
  publisher: zod.z.string(),
  generator: zod.z.string(),
  referrer: zod.z.union([zod.z.literal(""), zod.z.literal("no-referrer"), zod.z.literal("no-referrer-when-downgrade"), zod.z.literal("origin"), zod.z.literal("origin-when-cross-origin"), zod.z.literal("same-origin"), zod.z.literal("strict-origin"), zod.z.literal("strict-origin-when-cross-origin"), zod.z.literal("unsafe-url")]),
  viewport: zod.z.union([zod.z.string(), zod.z.object({
    width: zod.z.union([zod.z.number(), zod.z.literal("device-width")]),
    height: zod.z.union([zod.z.number(), zod.z.literal("device-height")]),
    initialScale: zod.z.number().min(0).max(10),
    maximumScale: zod.z.number().min(0).max(10),
    minimumScale: zod.z.number().min(0).max(10),
    userScalable: zod.z.union([zod.z.literal("yes"), zod.z.literal("no")]),
    viewportFit: zod.z.union([zod.z.literal("auto"), zod.z.literal("contain"), zod.z.literal("cover")])
  }).partial()]),
  robots: zod.z.union([zod.z.string(), zod.z.object({
    all: zod.z.boolean(),
    noindex: zod.z.boolean(),
    nofollow: zod.z.boolean(),
    none: zod.z.boolean(),
    noarchive: zod.z.boolean(),
    nositelinkssearchbox: zod.z.boolean(),
    nosnippet: zod.z.boolean(),
    indexifembedded: zod.z.boolean(),
    maxSnippet: zod.z.number(),
    maxImagePreview: zod.z.union([zod.z.literal("none"), zod.z.literal("standard"), zod.z.literal("large")]),
    maxVideoPreview: zod.z.number(),
    notranslate: zod.z.boolean(),
    unavailable_after: zod.z.string(),
    noimageindex: zod.z.boolean()
  }).partial()]),
  google: zod.z.union([zod.z.literal("nositelinkssearchbox"), zod.z.literal("nopagereadaloud")]),
  googlebot: zod.z.literal("notranslate"),
  googleSiteVerification: zod.z.string(),
  rating: zod.z.literal("adult"),
  ogUrl: zod.z.string(),
  ogTitle: zod.z.string(),
  ogDescription: zod.z.string(),
  ogType: zod.z.union([zod.z.literal("website"), zod.z.literal("article"), zod.z.literal("book"), zod.z.literal("profile"), zod.z.literal("music.song"), zod.z.literal("music.album"), zod.z.literal("music.playlist"), zod.z.literal("music.radio_status"), zod.z.literal("video.movie"), zod.z.literal("video.episode"), zod.z.literal("video.tv_show"), zod.z.literal("video.other")]),
  ogLocale: zod.z.string(),
  ogLocaleAlternate: zod.z.union([zod.z.string(), zod.z.array(zod.z.string())]),
  ogDeterminer: zod.z.union([zod.z.literal("a"), zod.z.literal("an"), zod.z.literal("the"), zod.z.literal(""), zod.z.literal("auto")]),
  ogSiteName: zod.z.string(),
  ogVideo: zod.z.string(),
  ogVideoUrl: zod.z.string(),
  ogVideoSecureUrl: zod.z.string(),
  ogVideoType: zod.z.union([zod.z.literal("application/x-shockwave-flash"), zod.z.literal("video/mp4")]),
  ogVideoWidth: zod.z.union([zod.z.string(), zod.z.number()]),
  ogVideoHeight: zod.z.union([zod.z.string(), zod.z.number()]),
  ogImage: zod.z.string(),
  ogImageUrl: zod.z.string(),
  ogImageSecureUrl: zod.z.string(),
  ogImageType: zod.z.union([zod.z.literal("image/jpeg"), zod.z.literal("image/gif"), zod.z.literal("image/png")]),
  ogImageWidth: zod.z.union([zod.z.string(), zod.z.number()]),
  ogImageHeight: zod.z.union([zod.z.string(), zod.z.number()]),
  fbAppId: zod.z.union([zod.z.string(), zod.z.number()]),
  twitterCard: zod.z.union([zod.z.literal("summary"), zod.z.literal("summary_large_image"), zod.z.literal("app"), zod.z.literal("player")]),
  twitterTitle: zod.z.string().max(70),
  twitterDescription: zod.z.string().max(200),
  twitterImage: zod.z.string(),
  twitterImageAlt: zod.z.string().max(420),
  twitterSite: zod.z.string(),
  twitterSiteId: zod.z.union([zod.z.string(), zod.z.number()]),
  twitterCreator: zod.z.string(),
  twitterCreatorId: zod.z.union([zod.z.string(), zod.z.number()]),
  twitterPlayer: zod.z.string(),
  twitterPlayerWidth: zod.z.union([zod.z.string(), zod.z.number()]),
  twitterPlayerHeight: zod.z.union([zod.z.string(), zod.z.number()]),
  twitterPlayerStream: zod.z.string(),
  twitterAppNameIphone: zod.z.string(),
  twitterAppIdIphone: zod.z.string(),
  twitterAppUrlIphone: zod.z.string(),
  twitterAppNameIpad: zod.z.string(),
  twitterAppIdIpad: zod.z.string(),
  twitterAppUrlIpad: zod.z.string(),
  twitterAppNameGoogleplay: zod.z.string(),
  twitterAppIdGoogleplay: zod.z.string(),
  twitterAppUrlGoogleplay: zod.z.string(),
  twitterData1: zod.z.string(),
  twitterLabel1: zod.z.string(),
  twitterData2: zod.z.string(),
  twitterLabel2: zod.z.string(),
  themeColor: zod.z.string(),
  mobileWebAppCapable: zod.z.literal("yes"),
  appleMobileWebAppCapable: zod.z.literal("yes"),
  appleMobileWebAppStatusBarStyle: zod.z.union([zod.z.literal("default"), zod.z.literal("black"), zod.z.literal("black-translucent")]),
  appleMobileWebAppTitle: zod.z.string(),
  formatDetection: zod.z.literal("telephone=no"),
  msapplicationTileImage: zod.z.string(),
  msapplicationTileColor: zod.z.string(),
  msapplicationConfig: zod.z.string(),
  contentSecurityPolicy: zod.z.union([zod.z.string(), zod.z.object({
    childSrc: zod.z.string(),
    connectSrc: zod.z.string(),
    defaultSrc: zod.z.string(),
    fontSrc: zod.z.string(),
    imgSrc: zod.z.string(),
    manifestSrc: zod.z.string(),
    mediaSrc: zod.z.string(),
    objectSrc: zod.z.string(),
    prefetchSrc: zod.z.string(),
    scriptSrc: zod.z.string(),
    scriptSrcElem: zod.z.string(),
    scriptSrcAttr: zod.z.string(),
    styleSrc: zod.z.string(),
    styleSrcElem: zod.z.string(),
    styleSrcAttr: zod.z.string(),
    workerSrc: zod.z.string(),
    baseUri: zod.z.string(),
    sandbox: zod.z.string(),
    formAction: zod.z.string(),
    frameAncestors: zod.z.string(),
    navigateTo: zod.z.string(),
    reportUri: zod.z.string(),
    reportTo: zod.z.string(),
    requireSriFor: zod.z.string(),
    requireTrustedTypesFor: zod.z.string(),
    trustedTypes: zod.z.string(),
    upgradeInsecureRequests: zod.z.string()
  }).partial()]),
  contentType: zod.z.literal("text/html; charset=utf-8"),
  defaultStyle: zod.z.string(),
  xUaCompatible: zod.z.literal("IE=edge"),
  refresh: zod.z.union([zod.z.string(), zod.z.object({
    seconds: zod.z.number(),
    url: zod.z.string()
  })])
});
const metaFlatInputSchema = metaFlatSchema.partial();

exports.baseSchema = baseSchema;
exports.headSchema = headSchema;
exports.linkEntriesSchema = linkEntriesSchema;
exports.linkSchema = linkSchema;
exports.metaEntriesSchema = metaEntriesSchema;
exports.metaFlatInputSchema = metaFlatInputSchema;
exports.metaFlatSchema = metaFlatSchema;
exports.metaSchema = metaSchema;
exports.scriptEntriesSchema = scriptEntriesSchema;
exports.scriptSchema = scriptSchema;
exports.styleEntriesSchema = styleEntriesSchema;
exports.styleSchema = styleSchema;
