'use strict';

const PkgName = "@vueuse/schema-org";
const AliasRuntime = "@vueuse/schema-org/runtime";
const schemaAutoImports = [
  "useSchemaOrg",
  "defineAddress",
  "defineAggregateOffer",
  "defineAggregateRating",
  "defineArticle",
  "defineBreadcrumb",
  "defineComment",
  "defineEvent",
  "defineVirtualLocation",
  "definePlace",
  "defineHowTo",
  "defineHowToStep",
  "defineImage",
  "defineLocalBusiness",
  "defineOffer",
  "defineOpeningHours",
  "defineOrganization",
  "definePerson",
  "defineProduct",
  "defineQuestion",
  "defineRecipe",
  "defineReview",
  "defineVideo",
  "defineWebPage",
  "defineWebSite",
  "defineBook",
  "defineCourse",
  "defineItemList",
  "defineMovie",
  "defineSearchAction",
  "defineReadAction",
  "defineSoftwareApp",
  "defineBookEdition",
  "defineSearchAction",
  "defineReadAction"
];
const schemaOrgAutoImports = [
  {
    from: AliasRuntime,
    imports: schemaAutoImports
  }
];
function resolveUserConfig(userConfig) {
  const meta = userConfig.meta || {};
  if (!meta.host && userConfig.canonicalHost)
    meta.host = userConfig.canonicalHost;
  if (!meta.inLanguage && userConfig.defaultLanguage)
    meta.inLanguage = userConfig.defaultLanguage;
  if (!meta.currency && userConfig.defaultCurrency)
    meta.currency = userConfig.defaultCurrency;
  return {
    ...userConfig,
    meta
  };
}
const schemaOrgComponents = [
  "SchemaOrgDebug",
  "SchemaOrgArticle",
  "SchemaOrgBreadcrumb",
  "SchemaOrgComment",
  "SchemaOrgEvent",
  "SchemaOrgHowTo",
  "SchemaOrgImage",
  "SchemaOrgLocalBusiness",
  "SchemaOrgOrganization",
  "SchemaOrgPerson",
  "SchemaOrgProduct",
  "SchemaOrgQuestion",
  "SchemaOrgRecipe",
  "SchemaOrgReview",
  "SchemaOrgVideo",
  "SchemaOrgWebPage",
  "SchemaOrgWebSite",
  "SchemaOrgMovie",
  "SchemaOrgCourse",
  "SchemaOrgItemList",
  "SchemaOrgBook",
  "SchemaOrgSoftwareApp"
];
function SchemaOrgResolver(options = {}) {
  const { prefix = "" } = options;
  return {
    type: "component",
    resolve: (name) => {
      if (name.startsWith(prefix)) {
        const componentName = name.substring(prefix.length);
        if (schemaOrgComponents.includes(componentName)) {
          return {
            name: componentName,
            from: AliasRuntime
          };
        }
      }
    }
  };
}

exports.AliasRuntime = AliasRuntime;
exports.PkgName = PkgName;
exports.SchemaOrgResolver = SchemaOrgResolver;
exports.resolveUserConfig = resolveUserConfig;
exports.schemaAutoImports = schemaAutoImports;
exports.schemaOrgAutoImports = schemaOrgAutoImports;
exports.schemaOrgComponents = schemaOrgComponents;
