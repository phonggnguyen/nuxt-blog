import { getCurrentInstance, nextTick, onBeforeUnmount, onMounted, watch } from "vue";
import { injectSchemaOrg } from "../../index.mjs";
let vmGlobalUid = -1;
export function useSchemaOrg(input) {
  if (!input)
    return;
  const client = injectSchemaOrg();
  if (!client)
    return;
  const vm = getCurrentInstance();
  const vmUid = vm?.uid || ++vmGlobalUid;
  client.ctx._ctxUid = vmUid;
  client.ctx.addNode(input);
  if (typeof window === "undefined") {
    nextTick(() => {
      watch(() => input, async () => {
        await client.forceRefresh();
      }, {
        immediate: true,
        deep: true
      });
    });
    return;
  }
  const stopWatcher = watch(() => input, () => {
    client.generateSchema();
  }, {
    deep: true
  });
  onMounted(() => {
    client.forceRefresh();
  });
  onBeforeUnmount(() => {
    client.removeContext(vmUid);
    client.generateSchema();
    stopWatcher();
  });
}
