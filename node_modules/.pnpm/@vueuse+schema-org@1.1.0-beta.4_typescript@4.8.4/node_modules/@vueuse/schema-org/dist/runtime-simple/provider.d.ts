import type { AggregateOffer, AggregateRating, Article, Book, BookEdition, BreadcrumbList, Comment, Course, Event, HowTo, HowToStep, ImageObject, ItemList, LocalBusiness, Movie, Offer, OpeningHoursSpecification, Organization, Person, Place, PostalAddress, Product, Question, ReadAction, Recipe, Review, SearchAction, SoftwareApp, Thing, VideoObject, VirtualLocation, WebPage, WebSite } from 'schema-org-graph-js';
import type { Ref } from 'vue';
export declare type MaybeRef<T> = T | Ref<T>;
export declare type DeepMaybeRef<T> = {
    [K in keyof T]: MaybeRef<T[K]>;
};
declare type Node<T> = Omit<DeepMaybeRef<T>, '@type'>;
export declare const defineAddress: <T extends Node<PostalAddress>>(input?: T) => T;
export declare const defineAggregateOffer: <T extends Node<AggregateOffer>>(input?: T) => T;
export declare const defineAggregateRating: <T extends Node<AggregateRating>>(input?: T) => T;
export declare const defineArticle: <T extends Node<Article>>(input?: T) => T;
export declare const defineBreadcrumb: <T extends Node<BreadcrumbList>>(input?: T) => T;
export declare const defineComment: <T extends Node<Comment>>(input?: T) => T;
export declare const defineEvent: <T extends Node<Event>>(input?: T) => T;
export declare const defineVirtualLocation: <T extends Node<VirtualLocation>>(input?: T) => T;
export declare const definePlace: <T extends Node<Place>>(input?: T) => T;
export declare const defineHowTo: <T extends Node<HowTo>>(input?: T) => T;
export declare const defineHowToStep: <T extends Node<HowToStep>>(input?: T) => T;
export declare const defineImage: <T extends Node<ImageObject>>(input?: T) => T;
export declare const defineLocalBusiness: <T extends Node<LocalBusiness>>(input?: T) => T;
export declare const defineOffer: <T extends Node<Offer>>(input?: T) => T;
export declare const defineOpeningHours: <T extends Node<OpeningHoursSpecification>>(input?: T) => T;
export declare const defineOrganization: <T extends Node<Organization>>(input?: T) => T;
export declare const definePerson: <T extends Node<Person>>(input?: T) => T;
export declare const defineProduct: <T extends Node<Product>>(input?: T) => T;
export declare const defineQuestion: <T extends Node<Question>>(input?: T) => T;
export declare const defineRecipe: <T extends Node<Recipe>>(input?: T) => T;
export declare const defineReview: <T extends Node<Review>>(input?: T) => T;
export declare const defineVideo: <T extends Node<VideoObject>>(input?: T) => T;
export declare const defineWebPage: <T extends Node<WebPage>>(input?: T) => T;
export declare const defineWebSite: <T extends Node<WebSite>>(input?: T) => T;
export declare const defineBook: <T extends Node<Book>>(input?: T) => T;
export declare const defineCourse: <T extends Node<Course>>(input?: T) => T;
export declare const defineItemList: <T extends Node<ItemList>>(input?: T) => T;
export declare const defineMovie: <T extends Node<Movie>>(input?: T) => T;
export declare const defineSearchAction: <T extends Node<SearchAction>>(input?: T) => T;
export declare const defineReadAction: <T extends Node<ReadAction>>(input?: T) => T;
export declare const defineSoftwareApp: <T extends Node<SoftwareApp>>(input?: T) => T;
export declare const defineBookEdition: <T extends Node<BookEdition>>(input?: T) => T;
export { Thing };
