'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const meta = require('./shared/schema-org.7f4ed196.cjs');
const vue = require('vue');
const schemaOrgGraphJs = require('schema-org-graph-js');

const isObject = (val) => val !== null && typeof val === "object";
const isArray = Array.isArray;
const smartUnref = (val) => {
  if (val !== null && !vue.isRef(val) && typeof val === "object")
    return deepUnref(val);
  return vue.unref(val);
};
const unrefArray = (arr) => {
  const unreffed = [];
  arr.forEach((val) => {
    unreffed.push(smartUnref(val));
  });
  return unreffed;
};
const unrefObject = (obj) => {
  const unreffed = {};
  Object.keys(obj).forEach((key) => {
    unreffed[key] = smartUnref(obj[key]);
  });
  return unreffed;
};
const deepUnref = (val) => {
  const checkedVal = vue.isRef(val) ? vue.unref(val) : val;
  if (!isObject(checkedVal))
    return checkedVal;
  if (isArray(checkedVal))
    return unrefArray(checkedVal);
  return unrefObject(checkedVal);
};

const createSchemaOrg = (options) => {
  if (!options.position)
    options.position = "body";
  const schemaRef = vue.ref("");
  let ctx = schemaOrgGraphJs.createSchemaOrgGraph();
  const resolveGraphNodesToHtml = async () => {
    const meta = await options.meta();
    const resolvedMeta = schemaOrgGraphJs.resolveMeta(deepUnref(meta));
    const resolvedCtx = schemaOrgGraphJs.buildResolvedGraphCtx(ctx.nodes.map(deepUnref), resolvedMeta);
    const nodes = schemaOrgGraphJs.organiseNodes(resolvedCtx.nodes);
    return schemaOrgGraphJs.renderNodesToSchemaOrgHtml(nodes);
  };
  const client = {
    ctx,
    options,
    install(app) {
      app.config.globalProperties.$schemaOrg = client;
      app.provide("schemaorg", client);
    },
    async generateSchema() {
      schemaRef.value = await resolveGraphNodesToHtml();
      return schemaRef;
    },
    async forceRefresh() {
      await client.generateSchema();
      await client.setupDOM();
    },
    removeContext(uid) {
      const newCtx = schemaOrgGraphJs.createSchemaOrgGraph();
      newCtx.meta = ctx.meta;
      newCtx.addNode(ctx.nodes.filter((n) => n._uid !== uid));
      ctx = newCtx;
    },
    setupDOM() {
      return options.updateHead(vue.computed(() => {
        const script = {
          "type": "application/ld+json",
          "data-id": "schema-org-graph",
          "key": "schema-org-graph",
          "children": schemaRef.value
        };
        if (options.position === "body")
          script.body = true;
        return {
          script: [
            script
          ]
        };
      }));
    }
  };
  return client;
};

function injectSchemaOrg() {
  let client;
  try {
    client = vue.inject("schemaorg");
  } catch (e) {
  }
  if (!client)
    console.warn("[@vueuse/schema-org] Failed to find plugin, you may have forgotten to apply app.use(schemaOrg)");
  return client;
}

exports.AliasRuntime = meta.AliasRuntime;
exports.PkgName = meta.PkgName;
exports.SchemaOrgResolver = meta.SchemaOrgResolver;
exports.resolveUserConfig = meta.resolveUserConfig;
exports.schemaAutoImports = meta.schemaAutoImports;
exports.schemaOrgAutoImports = meta.schemaOrgAutoImports;
exports.schemaOrgComponents = meta.schemaOrgComponents;
exports.createSchemaOrg = createSchemaOrg;
exports.injectSchemaOrg = injectSchemaOrg;
