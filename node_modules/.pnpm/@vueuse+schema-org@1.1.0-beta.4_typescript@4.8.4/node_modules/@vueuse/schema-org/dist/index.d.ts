import { ComponentResolver } from 'unplugin-vue-components';
import { U as UserConfig, R as ResolvedUserConfig } from './types-e5e45014.js';
export { B as BaseMetaInput, R as ResolvedUserConfig, S as SchemaOrgPluginOptions, U as UserConfig } from './types-e5e45014.js';
import { ComputedRef, App, Ref } from 'vue';
import { MetaInput, SchemaOrgContext } from 'schema-org-graph-js';

declare const PkgName = "@vueuse/schema-org";
declare const AliasRuntime = "@vueuse/schema-org/runtime";
interface SchemaOrgResolverOptions {
    /**
     * prefix for headless ui components used in templates
     *
     * @default ""
     */
    prefix?: string;
}
declare const schemaAutoImports: string[];
declare const schemaOrgAutoImports: {
    from: string;
    imports: string[];
}[];
declare function resolveUserConfig(userConfig: UserConfig): ResolvedUserConfig;
declare const schemaOrgComponents: string[];
declare function SchemaOrgResolver(options?: SchemaOrgResolverOptions): ComponentResolver;

interface CreateSchemaOrgInput {
    /**
     * Whether to inject the scripts at the end of the body or in the head.
     */
    position?: 'body' | 'head';
    /**
     * The meta data used to render the final schema.org graph.
     */
    meta: () => MetaInput | Promise<MetaInput>;
    /**
     * Client used to write schema to the document.
     */
    updateHead: (fn: ComputedRef) => void | Promise<void>;
}
interface SchemaOrgVuePlugin {
    /**
     * Install the plugin on the Vue context.
     *
     * @param app
     */
    install: (app: App) => void;
    /**
     * Given a Vue component context, deleted any nodes associated with it.
     */
    removeContext: (uid: number) => void;
    /**
     * Sets up the initial placeholder for the meta tag using useHead.
     */
    setupDOM: () => void | Promise<void>;
    /**
     * Trigger the schemaRef to be updated.
     */
    generateSchema: () => Promise<Ref<string>> | Ref<string>;
    /**
     * Force Schema.org to be refreshed in the DOM.
     */
    forceRefresh: () => Promise<void>;
    /**
     * The inner context being used to generate the Schema.org graph.
     */
    ctx: SchemaOrgContext;
    /**
     * Options used to render the Schema.
     */
    options: CreateSchemaOrgInput;
}
declare const createSchemaOrg: (options: CreateSchemaOrgInput) => SchemaOrgVuePlugin;

declare function injectSchemaOrg(): SchemaOrgVuePlugin | undefined;

export { AliasRuntime, CreateSchemaOrgInput, PkgName, SchemaOrgResolver, SchemaOrgResolverOptions, SchemaOrgVuePlugin, createSchemaOrg, injectSchemaOrg, resolveUserConfig, schemaAutoImports, schemaOrgAutoImports, schemaOrgComponents };
