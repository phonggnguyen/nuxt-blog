import { defineNuxtModule, createResolver, addPlugin, addTemplate, addComponent, importModule, extendWebpackConfig } from '@nuxt/kit';
import { resolveUserConfig, AliasRuntime, schemaOrgComponents, schemaOrgAutoImports } from '@vueuse/schema-org';
import { dirname } from 'pathe';

const Pkg = "@vueuse/schema-org";
const module = defineNuxtModule({
  meta: {
    configKey: "schemaOrg",
    compatibility: {
      nuxt: ">=3.0.0-rc.9",
      bridge: false
    }
  },
  async setup(moduleOptions, nuxt) {
    const { resolve, resolvePath } = createResolver(import.meta.url);
    moduleOptions = resolveUserConfig(moduleOptions);
    if (nuxt.options.ssr && !moduleOptions.canonicalHost && !moduleOptions.meta?.host) {
      console.warn("WARN [nuxt-schema-org] Please provide a `canonicalHost` to use this module with SSR enabled.");
      return;
    }
    if (!nuxt.options.ssr)
      moduleOptions.client = true;
    if (typeof moduleOptions.client === "undefined")
      moduleOptions.client = !!nuxt.options.dev;
    const pkgPath = dirname(await resolvePath(Pkg));
    nuxt.options.alias[AliasRuntime] = `${pkgPath}/runtime-${moduleOptions.full ? "schema-dts" : "simple"}`;
    const moduleRuntimeDir = resolve("./runtime");
    nuxt.options.build.transpile.push(...[moduleRuntimeDir, AliasRuntime]);
    if (!moduleOptions.client)
      addPlugin(resolve(moduleRuntimeDir, "plugin-fallback.client"));
    addPlugin({
      src: resolve(moduleRuntimeDir, "plugin"),
      mode: moduleOptions.client ? "all" : "server"
    });
    addTemplate({
      filename: "nuxt-schema-org-config.mjs",
      getContents: () => `export default ${JSON.stringify(moduleOptions)}`
    });
    for (const component of schemaOrgComponents) {
      await addComponent({
        name: component,
        export: component,
        chunkName: "nuxt-schema-org/components",
        filePath: AliasRuntime
      });
    }
    nuxt.hooks.hook("imports:sources", (autoImports) => {
      autoImports.unshift(...schemaOrgAutoImports);
    });
    nuxt.hooks.hook("vite:extendConfig", async (config, { isClient }) => {
      config.plugins = config.plugins || [];
      const SchemaOrgVite = await importModule(`${pkgPath}/vite`, { interopDefault: true });
      config.plugins.push(SchemaOrgVite({
        root: nuxt.options.rootDir,
        dts: false,
        mock: !moduleOptions.client && isClient,
        full: moduleOptions.full
      }));
    });
    extendWebpackConfig(async (config) => {
      config.plugins = config.plugins || [];
      const SchemaOrgWebpack = await importModule(`${pkgPath}/webpack`, { interopDefault: true });
      const plugins = SchemaOrgWebpack({
        root: nuxt.options.rootDir,
        dts: false,
        mock: !moduleOptions.client && config.name === "client",
        full: moduleOptions.full
      });
      config.plugins.push(...plugins);
    });
  }
});

export { module as default };
