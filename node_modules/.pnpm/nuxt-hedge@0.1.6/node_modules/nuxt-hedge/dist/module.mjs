import { fileURLToPath } from 'url';
import { defineNuxtModule, addTemplate, addImports, addComponent, addPlugin } from '@nuxt/kit';
import { resolve } from 'pathe';
import fg from 'fast-glob';

const headTypeTemplate = {
  filename: "head.d.ts",
  getContents: async ({ options }) => {
    const paths = await options.getPaths();
    let output = "// Generated by path discovery\n";
    if (paths.public.length)
      output += `export type PublicFiles = ${paths.public.map((path) => `'/${path}'`).join("|")}
`;
    output += `
module '@nuxt/schema' {
  import { VueUseHeadSchema } from '@vueuse/head'
  import { MergeHead } from '@zhead/schema'
  import { ReactiveHead } from '@zhead/schema-vue'

  export interface HeadAugmentations extends MergeHead {
    link: {
      href: PublicFiles
    }
    script: {
      src: PublicFiles
    }
  }

  export interface MetaObject {
    /**
     * The character encoding in which the document is encoded => \`<meta charset="<value>" />\`
     *
     * @default \`'utf-8'\`
     */
    charset?: string;
    /**
     * Configuration of the viewport (the area of the window in which web content can be seen),
     * mapped to => \`<meta name="viewport" content="<value>" />\`
     *
     * @default \`'width=device-width, initial-scale=1'\`
     */
    viewport?: string;
        /**
     * The <title> HTML element defines the document's title that is shown in a browser's title bar or a page's tab.
     * It only contains text; tags within the element are ignored.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title
     */
    title?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['title'];
    /**
     * Generate the title from a template.
     */
    titleTemplate?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['titleTemplate'];
    /**
     * The <base> HTML element specifies the base URL to use for all relative URLs in a document.
     * There can be only one <base> element in a document.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
     */
    base?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['base'];
    /**
     * The <link> HTML element specifies relationships between the current document and an external resource.
     * This element is most commonly used to link to stylesheets, but is also used to establish site icons
     * (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as
     */
    link?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['link'];
    /**
     * The <meta> element represents metadata that cannot be expressed in other HTML elements, like <link> or <script>.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
     */
    meta?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['meta'];
    /**
     * The <style> HTML element contains style information for a document, or part of a document.
     * It contains CSS, which is applied to the contents of the document containing the <style> element.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style
     */
    style?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['style'];
    /**
     * The <script> HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
     */
    script?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['script'];
    /**
     * The <noscript> HTML element defines a section of HTML to be inserted if a script type on the page is unsupported
     * or if scripting is currently turned off in the browser.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript
     */
    noscript?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['noscript'];
    /**
     * Attributes for the <html> HTML element.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html
     */
    htmlAttrs?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['htmlAttrs'];
    /**
     * Attributes for the <body> HTML element.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body
     */
    bodyAttrs?: ReactiveHead<HeadAugmentations & VueUseHeadSchema>['bodyAttrs'];
  }
}
`;
    return output;
  }
};

const module = defineNuxtModule({
  meta: {
    name: "nuxt-hedge",
    configKey: "head"
  },
  defaults: {
    seoOptimise: true,
    resolveAliases: false
  },
  async setup(options, nuxt) {
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    addTemplate({
      filename: "nuxt-hedge-config.mjs",
      getContents: () => `export default ${JSON.stringify(options)}`
    });
    const getPaths = async () => ({
      public: await fg(["**/*"], { cwd: resolve(nuxt.options.srcDir, "public") })
    });
    addTemplate({ ...headTypeTemplate, options: { getPaths } });
    nuxt.hooks.hook("prepare:types", ({ references }) => {
      references.push({ path: resolve(nuxt.options.buildDir, "head.d.ts") });
    });
    nuxt.options.build.transpile.push(...["@zhead/schema", "@zhead/vue", "@zhead/schema-vue"]);
    addImports({
      name: "useMetaTags",
      from: runtimeDir
    });
    await addComponent({
      name: "DebugHead",
      mode: "client",
      filePath: `${runtimeDir}/components/DebugHead.client.vue`
    });
    nuxt.options.build.transpile.push("@vueuse/head");
    nuxt.options.alias["#head"] = runtimeDir;
    addPlugin({ src: resolve(runtimeDir, "plugin") });
    addPlugin({ src: resolve(runtimeDir, "lib/vueuse-head.plugin") });
  }
});

export { module as default };
