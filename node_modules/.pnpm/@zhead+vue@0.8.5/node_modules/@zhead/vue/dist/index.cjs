'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const schemaVue = require('@zhead/schema-vue');
const vue = require('vue');
const zhead = require('zhead');

const isObject = (val) => val !== null && typeof val === "object";
const isArray = Array.isArray;
const smartUnref = (val) => {
  if (val !== null && !vue.isRef(val) && typeof val === "object")
    return deepUnref(val);
  return vue.unref(val);
};
const unrefArray = (arr) => {
  const unreffed = [];
  arr.forEach((val) => {
    unreffed.push(smartUnref(val));
  });
  return unreffed;
};
const unrefObject = (obj) => {
  const unreffed = {};
  Object.keys(obj).forEach((key) => {
    unreffed[key] = smartUnref(obj[key]);
  });
  return unreffed;
};
const deepUnref = (val) => {
  const checkedVal = typeof val === "function" ? val() : vue.unref(val);
  if (!isObject(checkedVal))
    return checkedVal;
  if (isArray(checkedVal))
    return unrefArray(checkedVal);
  return unrefObject(checkedVal);
};

function packMeta(input) {
  const val = vue.ref();
  vue.watchEffect(() => {
    val.value = zhead.packMeta(deepUnref(input));
  });
  return val;
}
function unpackMeta(input) {
  const val = vue.ref();
  vue.watch(() => input, () => {
    val.value = zhead.unpackMeta(deepUnref(input));
  }, {
    immediate: true,
    deep: true
  });
  return val;
}

function defineHead(input) {
  return input;
}
function defineHeadRaw(input) {
  return input;
}

exports.defineHead = defineHead;
exports.defineHeadRaw = defineHeadRaw;
exports.packMeta = packMeta;
exports.unpackMeta = unpackMeta;
for (const k in schemaVue) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = schemaVue[k];
}
