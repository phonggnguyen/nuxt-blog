export * from '@zhead/schema-vue';
import { unref, isRef, ref, watchEffect, watch } from 'vue';
import { packMeta as packMeta$1, unpackMeta as unpackMeta$1 } from 'zhead';

const isObject = (val) => val !== null && typeof val === "object";
const isArray = Array.isArray;
const smartUnref = (val) => {
  if (val !== null && !isRef(val) && typeof val === "object")
    return deepUnref(val);
  return unref(val);
};
const unrefArray = (arr) => {
  const unreffed = [];
  arr.forEach((val) => {
    unreffed.push(smartUnref(val));
  });
  return unreffed;
};
const unrefObject = (obj) => {
  const unreffed = {};
  Object.keys(obj).forEach((key) => {
    unreffed[key] = smartUnref(obj[key]);
  });
  return unreffed;
};
const deepUnref = (val) => {
  const checkedVal = typeof val === "function" ? val() : unref(val);
  if (!isObject(checkedVal))
    return checkedVal;
  if (isArray(checkedVal))
    return unrefArray(checkedVal);
  return unrefObject(checkedVal);
};

function packMeta(input) {
  const val = ref();
  watchEffect(() => {
    val.value = packMeta$1(deepUnref(input));
  });
  return val;
}
function unpackMeta(input) {
  const val = ref();
  watch(() => input, () => {
    val.value = unpackMeta$1(deepUnref(input));
  }, {
    immediate: true,
    deep: true
  });
  return val;
}

function defineHead(input) {
  return input;
}
function defineHeadRaw(input) {
  return input;
}

export { defineHead, defineHeadRaw, packMeta, unpackMeta };
