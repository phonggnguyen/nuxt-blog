import { MergeHead, Head, MetaFlatInput } from '@zhead/schema';
import { HeadRaw } from '@zhead/schema-raw';

declare function defineHead<T extends MergeHead>(input: Head<T>): Head<T>;
declare function defineHeadRaw(input: HeadRaw): HeadRaw<{}>;

declare function resolveSeoHead<T extends Head>(input: T): T;

interface HeadTag {
    tag: string;
    props: {
        body?: boolean;
        [k: string]: any;
    };
}
declare function generateTagsStrict<T extends Head>(input: T): HeadTag[];
declare function generateTags<T extends Head>(input: T): HeadTag[];

declare function generateHtml<T extends Head>(input: T): string;
declare function generateHtmlStrict<T extends Head>(input: T): string;

declare const renderTemplate: (template: Head['titleTemplate'], title?: string) => string;

/**
 * Convert an array of meta entries to a flat object.
 * @param inputs
 */
declare function packMeta<T extends Required<Head>['meta']>(inputs: T): MetaFlatInput;

/**
 * Converts a flat meta object into an array of meta entries.
 * @param input
 */
declare function unpackMeta<T extends MetaFlatInput>(input: T): Required<Head>['meta'];

export { HeadTag, defineHead, defineHeadRaw, generateHtml, generateHtmlStrict, generateTags, generateTagsStrict, packMeta, renderTemplate, resolveSeoHead, unpackMeta };
