{"version":3,"file":"ContentDoc.275f24fb.js","sources":["../../../../node_modules/.pnpm/@nuxt+content@2.0.1/node_modules/@nuxt/content/dist/runtime/components/ContentDoc.mjs"],"sourcesContent":["import { defineComponent, h, useSlots, nextTick } from \"vue\";\nimport ContentRenderer from \"./ContentRenderer.mjs\";\nimport ContentQuery from \"./ContentQuery.mjs\";\nimport { useRoute, useHead } from \"#imports\";\nexport default defineComponent({\n  props: {\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    path: {\n      type: String,\n      required: false,\n      default: () => useRoute().path\n    },\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    }\n  },\n  render(ctx) {\n    const slots = useSlots();\n    const { tag, excerpt, path, query } = ctx;\n    const contentQueryProps = Object.assign(query || {}, { path, find: \"one\" });\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    const addHead = (doc) => {\n      if (path !== useRoute().path) {\n        return;\n      }\n      const head = Object.assign({}, doc.head);\n      head.title = head.title || doc.title;\n      head.meta = head.meta || [];\n      const description = head.description || doc.description;\n      if (description && head.meta.filter((m) => m.name === \"description\").length === 0) {\n        head.meta.push({\n          name: \"description\",\n          content: description\n        });\n      }\n      if (head.image && head.meta.filter((m) => m.property === \"og:image\").length === 0) {\n        head.meta.push({\n          property: \"og:image\",\n          content: head.image\n        });\n      }\n      if (process.client) {\n        nextTick(() => useHead(head));\n      } else {\n        useHead(head);\n      }\n    };\n    return h(ContentQuery, contentQueryProps, {\n      default: slots?.default ? ({ data, refresh, isPartial }) => {\n        addHead(data);\n        return slots.default({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n      } : ({ data }) => {\n        addHead(data);\n        return h(ContentRenderer, { value: data, excerpt, tag, ...this.$attrs }, { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) });\n      },\n      empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n      \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n    });\n  }\n});\n"],"names":["ContentRenderer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAA,aAAA,gBAAA;AAAA,EACA,OAAA;AAAA,IACA,KAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA,IACA,SAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA,IACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA,MAAA,SAAA,EAAA;AAAA,IACA;AAAA,IACA,OAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA,EACA;AAAA,EACA,OAAA,KAAA;AACA,UAAA,QAAA;AACA,UAAA,EAAA,KAAA,SAAA,MAAA,MAAA,IAAA;AACA,UAAA,oBAAA,OAAA,OAAA,SAAA,IAAA,EAAA,MAAA,MAAA,MAAA,CAAA;AACA,UAAA,YAAA,CAAA,MAAA,SAAA,EAAA,OAAA,MAAA,KAAA,UAAA,EAAA,SAAA,0CAAA,MAAA,KAAA,GAAA,MAAA,CAAA,CAAA;AACA,UAAA,UAAA,CAAA,QAAA;AACA,UAAA,SAAA,SAAA,EAAA,MAAA;AACA;AAAA,MACA;AACA,YAAA,OAAA,OAAA,OAAA,CAAA,GAAA,IAAA,IAAA;AACA,WAAA,QAAA,KAAA,SAAA,IAAA;AACA,WAAA,OAAA,KAAA,QAAA,CAAA;AACA,YAAA,cAAA,KAAA,eAAA,IAAA;AACA,UAAA,eAAA,KAAA,KAAA,OAAA,CAAA,MAAA,EAAA,SAAA,aAAA,EAAA,WAAA,GAAA;AACA,aAAA,KAAA,KAAA;AAAA,UACA,MAAA;AAAA,UACA,SAAA;AAAA,QACA,CAAA;AAAA,MACA;AACA,UAAA,KAAA,SAAA,KAAA,KAAA,OAAA,CAAA,MAAA,EAAA,aAAA,UAAA,EAAA,WAAA,GAAA;AACA,aAAA,KAAA,KAAA;AAAA,UACA,UAAA;AAAA,UACA,SAAA,KAAA;AAAA,QACA,CAAA;AAAA,MACA;AAGA;AACA,gBAAA,IAAA;AAAA,MACA;AAAA,IACA;AACA,WAAA,EAAA,cAAA,mBAAA;AAAA,MACA,UAAA,+BAAA,WAAA,CAAA,EAAA,MAAA,SAAA,gBAAA;AACA,gBAAA,IAAA;AACA,eAAA,MAAA,QAAA,EAAA,KAAA,MAAA,SAAA,WAAA,SAAA,GAAA,KAAA,OAAA,CAAA;AAAA,MACA,IAAA,CAAA,EAAA,WAAA;AACA,gBAAA,IAAA;AACA,eAAA,EAAAA,oBAAA,EAAA,OAAA,MAAA,SAAA,KAAA,GAAA,KAAA,OAAA,GAAA,EAAA,OAAA,CAAA,cAAA,+BAAA,SAAA,MAAA,MAAA,QAAA,IAAA,UAAA,WAAA,IAAA,EAAA,CAAA;AAAA,MACA;AAAA,MACA,OAAA,CAAA,aAAA;;AAAA,qDAAA,UAAA,+BAAA,cAAA,EAAA,KAAA,MAAA,6EAAA;AAAA;AAAA,MACA,aAAA,CAAA;;AAAA,qDAAA,iBAAA,+BAAA,cAAA,EAAA,KAAA,MAAA,kFAAA;AAAA;AAAA,IACA,CAAA;AAAA,EACA;AACA,CAAA;"}