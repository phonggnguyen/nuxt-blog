{"version":3,"file":"ContentQuery.0bfd106b.js","sources":["../../../../node_modules/.pnpm/@nuxt+content@2.0.1/node_modules/@nuxt/content/dist/runtime/components/ContentQuery.mjs"],"sourcesContent":["import { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots } from \"vue\";\nimport { computed, useAsyncData, queryContent } from \"#imports\";\nexport default defineComponent({\n  props: {\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value.includes(\"/_\"));\n    const { data, refresh } = await useAsyncData(`content-query-${hash(props)}`, () => {\n      let queryBuilder;\n      if (path.value) {\n        queryBuilder = queryContent(path.value);\n      } else {\n        queryBuilder = queryContent();\n      }\n      if (only.value) {\n        queryBuilder = queryBuilder.only(only.value);\n      }\n      if (without.value) {\n        queryBuilder = queryBuilder.without(without.value);\n      }\n      if (where.value) {\n        queryBuilder = queryBuilder.where(where.value);\n      }\n      if (sort.value) {\n        queryBuilder = queryBuilder.sort(sort.value);\n      }\n      if (limit.value) {\n        queryBuilder = queryBuilder.limit(limit.value);\n      }\n      if (skip.value) {\n        queryBuilder = queryBuilder.skip(skip.value);\n      }\n      if (locale.value) {\n        queryBuilder = queryBuilder.where({ _locale: locale.value });\n      }\n      if (find.value === \"one\") {\n        return queryBuilder.findOne();\n      }\n      if (find.value === \"surround\") {\n        if (!path.value) {\n          console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n          console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n          return queryBuilder.find();\n        }\n        return queryBuilder.findSurround(path);\n      }\n      return queryBuilder.find();\n    });\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      data,\n      refresh,\n      isPartial,\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (data._type && data._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\n"],"names":[],"mappings":"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"}