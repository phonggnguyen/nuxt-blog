{"version":3,"file":"Breadcrumbs.1630eadf.js","sources":["../../../../composables/breadcrumbs.ts","../../../../components/content/Breadcrumbs.vue"],"sourcesContent":["import type { ParsedURL } from 'ufo'\nimport { hasTrailingSlash, joinURL, parseURL, stringifyParsedURL, withTrailingSlash } from 'ufo'\nimport { useRoute, useRoutesContent } from '#imports'\n\nconst getBreadcrumbs = (input: string) => {\n  const startNode = parseURL(input)\n  const appendsTrailingSlash = hasTrailingSlash(startNode.pathname)\n\n  const stepNode = (node: ParsedURL, nodes: string[] = []) => {\n    const fullPath = stringifyParsedURL(node)\n    // the pathname will always be without the trailing slash\n    const currentPathName = node.pathname\n    // when we hit the root the path will be an empty string; we swap it out for a slash\n    nodes.push(fullPath || '/')\n    // strip the last path segment (/my/cool/path -> /my/cool)\n    node.pathname = currentPathName.substring(0, currentPathName.lastIndexOf('/'))\n    // if the input was provided with a trailing slash we need to honour that\n    if (appendsTrailingSlash)\n      node.pathname = withTrailingSlash(node.pathname.substring(0, node.pathname.lastIndexOf('/')))\n\n    // if we still have a pathname, and it's different, traverse\n    if (node.pathname !== currentPathName)\n      stepNode(node, nodes)\n    return nodes\n  }\n  return stepNode(startNode)\n}\n\nexport async function useBreadcrumbs() {\n  const route = useRoute()\n  const links = getBreadcrumbs(route.path)\n  return await Promise.all(links\n    .reverse()\n    .map(async (path, key) => {\n      let contentSlug = path.startsWith('/blog/') || path.startsWith('/posts/')\n        ? path.replace('/blog', '/posts')\n        : joinURL('/pages', path)\n      if (contentSlug === '/pages')\n        contentSlug = '/pages/home'\n      const { data: page } = await useRoutesContent(path)\n      if (key === links.length - 1) {\n        return {\n          name: page.value?.title,\n        }\n      }\n      return {\n        name: page.value?.title,\n        item: path,\n      }\n    }))\n}\n","<script lang=\"ts\" setup>\nconst breadcrumbs = await useBreadcrumbs()\n</script>\n\n<template>\n  <SchemaOrgBreadcrumb\n    v-if=\"breadcrumbs.length > 1\"\n    :item-list-element=\"breadcrumbs\"\n  >\n    <nav aria-label=\"Breadcrumb\">\n      <ul class=\"flex space-x-4 text-sm opacity-50 list-none !mt-0 !mb-0\">\n        <template v-for=\"(item, key) in breadcrumbs\">\n          <li v-if=\"item.item\" :key=\"key\" class=\"!mt-0\">\n            <NuxtLink :to=\"item.item\" class=\"inline !border-none\">\n              {{ item.name }}\n            </NuxtLink>\n          </li>\n        </template>\n      </ul>\n    </nav>\n  </SchemaOrgBreadcrumb>\n</template>\n\n<style scoped lang=\"scss\">\nli:first-child {\n  padding-left: 0;\n  &:before {\n    display: none;\n  }\n}\n</style>\n"],"names":["_withAsyncContext"],"mappings":";;;;;;;;;;;;;;;;;AAIA,MAAA,iBAAA,CAAA,UAAA;AACE,QAAA,YAAA,SAAA,KAAA;AACA,QAAA,uBAAA,iBAAA,UAAA,QAAA;AAEA,QAAA,WAAA,CAAA,MAAA,QAAA,CAAA,MAAA;AACE,UAAA,WAAA,mBAAA,IAAA;AAEA,UAAA,kBAAA,KAAA;AAEA,UAAA,KAAA,YAAA,GAAA;AAEA,SAAA,WAAA,gBAAA,UAAA,GAAA,gBAAA,YAAA,GAAA,CAAA;AAEA,QAAA;AACE,WAAA,WAAA,kBAAA,KAAA,SAAA,UAAA,GAAA,KAAA,SAAA,YAAA,GAAA,CAAA,CAAA;AAGF,QAAA,KAAA,aAAA;AACE,eAAA,MAAA,KAAA;AACF,WAAA;AAAA,EAAO;AAET,SAAA,SAAA,SAAA;AACF;AAEA,eAAA,iBAAA;AACE,QAAA,QAAA;AACA,QAAA,QAAA,eAAA,MAAA,IAAA;AACA,SAAA,MAAA,QAAA,IAAA,MAAA,QAAA,EAAA,IAAA,OAAA,MAAA,QAAA;;AAGI,SAAA,WAAA,QAAA,KAAA,KAAA,WAAA,SAAA,IAAA,KAAA,QAAA,SAAA,QAAA,IAAA,QAAA,UAAA,IAAA;AAKA,UAAA,EAAA,MAAA,KAAA,IAAA,MAAA,iBAAA,IAAA;AACA,QAAA,QAAA,MAAA,SAAA,GAAA;AACE,aAAA;AAAA,QAAO,OAAA,UAAA,UAAA,mBAAA;AAAA,MACa;AAAA,IACpB;AAEF,WAAA;AAAA,MAAO,OAAA,UAAA,UAAA,mBAAA;AAAA,MACa,MAAA;AAAA,IACZ;AAAA,EACR,CAAA,CAAA;AAEN;;;;;;ACjDA,UAAA,eAAA,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAA,gBAAA,GAAA,SAAA,MAAA,QAAA,UAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}